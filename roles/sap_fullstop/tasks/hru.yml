---
- name: Delete temporary created files in previous this script run
  shell: rm -f /tmp/sidfile.txt /tmp/SAPDBHOSTfile.txt /tmp/testing1.txt
  become: yes

- name: check sapmnt is found or not
  shell: df -g|grep -i sapmnt|wc -l
  register: df

- debug:
    msg: "{{ df }}"

- name: Getting current host info
  shell: hostname
  register: hname

- debug:
    msg: "{{ hname }}"

- name: Setting facts - hname
  set_fact:
    hname: "{{ hname['stdout'] }}"

- debug:
    msg: "{{ hname }}"

- name: Get number of SIDs
  shell: |
    df -g|grep -i sapmnt|awk '{print $NF}'|cut -d/ -f3 > /tmp/sidfile.txt
  when: df | int >= 1

- name: Get sid list
  shell: cat /tmp/sidfile.txt
  register: sidd
  when: df | int >= 1

- name: Demo set_facts
  set_fact:
    sidd_list: "{{ sidd.stdout_lines | list }}"
  when: df | int >= 1

- name: Get sidadm user
  shell: cat /tmp/sidfile.txt| tr [:upper:] [:lower:] | sed '/$/s/.*/&adm/'
  register: sids
  when: df | int >= 1

- name: Debug Registry
  debug: var=sids
  when: df | int >= 1

- name: Demo set_facts
  set_fact:
    sids_list: "{{ sids.stdout_lines | list }}"
  when: df | int >= 1

- name: Execute SAP stop
  shell: |
    su - {{ item }} -c stopsap
  register: simulate
  with_items: "{{ sids_list }}"
  ignore_errors: true
  when: df | int >= 1

- name: Results of SAP stop execution
  debug:
    msg: "{{ item }}"
  with_items: "{{ simulate.results }}"
  when: df | int >= 1

- name: Finding db server
  shell: |
    grep -i "SAPDBHOST" /sapmnt/{{ item }}/profile/DEFAULT.PFL|awk '{print $3}' >> /tmp/SAPDBHOSTfile.txt
  #register: servertype
  #with_items: "{{ sids_list }}"
  with_items: "{{ sidd_list }}"
  when: df | int >= 1

- name: Get SAPDBHOSTfile value
  shell: cat /tmp/SAPDBHOSTfile.txt|sort|uniq
  register: servertype
  when: df | int >= 1

- debug:
    msg: "{{ servertype }}"
  when: df | int >= 1

- name: Demo set_facts
  set_fact:
    servertype_list: "{{ servertype.stdout_lines | list }}"
  when: df | int >= 1

- debug:
    msg: "{{ servertype.stdout_lines }}"
  when: df | int >= 1

- name: pmoncnt=`ps -ef|grep -i pmon|grep -v grep|wc -l`
  shell: ps -ef|grep -i pmon|grep -v grep|wc -l
  register: pmoncnt  

- debug:
    msg: "{{ pmoncnt }}"
  
- name: Setting fact - pmoncnt
  set_fact:
    pmoncnt: "{{ pmoncnt['stdout'] }}"
    
- debug:
    msg: "{{ pmoncnt }}"
  
- name: Copy listener script to remote endpoint
  copy:
    src: ./files/oraenv_fulldbsap_stop.sh
    dest: /tmp/
    owner: oracle
    group: oinstall
    mode: '0775'
  when: 
    - pmoncnt | int == 1

- name: checking DB type and stopping DB forcefully, if it is not stopped by stopsap command
  shell: |
    for i in `cat /tmp/SAPDBHOSTfile.txt|sort|uniq`
    do
    if [ $i == {{ hname }} ]
    then
    db=`grep -i "dbms/type" /sapmnt/{{ item }}/profile/DEFAULT.PFL|awk '{print $3}'`
    echo " DB = $db " >> /tmp/testing1.txt
    if [ $db == ora ]
    then
    ps -ef|grep -i pmon|grep -i {{ item }}|grep -v grep |wc -l >> /tmp/testing1.txt
    pmoncnt1=`ps -ef|grep -i pmon|grep -i {{ item }}|grep -v grep |wc -l`
    if [ $pmoncnt1 == 1 ]
    then
    echo "Oracle DB is still Up" >> /tmp/testing1.txt
    echo "stopping db by oracle user" >> /tmp/testing1.txt
    su - oracle -c /tmp/oraenv_fulldbsap_stop.sh {{ item }}
    else
    echo "Oracle DB is down" >> /tmp/testing1.txt
    fi
    elif [ $db == ada ]
    then
    echo "Found DB is MAX DB, automation can't stop maxdb, manual intervention required" >> /tmp/testing1.txt
    elif [ $db == db6 ]
    then
    echo "Found DB is DB2 Database, checking DB status" >> /tmp/testing1.txt
    db2cnt=`ps -ef|grep -i db2sysc|grep -i {{ item }}|grep -v grep|wc -l`
    if [ $db2cnt == 1 ]
    then
    echo "DB2 DB is still up, doing force DB stop" >> /tmp/testing1.txt
    dbuser1=`echo {{ item }}|tr '[:upper:]' '[:lower:]'`
    dbuser="${dbuser1}adm"
    su - $dbuser -c "db2stop force"
    else
    echo "DB2 DB {{ item }} is Down" >> /tmp/testing1.txt
    fi
    else
    echo "DB type is not Oracle, MaxDb or DB2 DB" >> /tmp/testing1.txt
    fi
    else
    echo "DB type is not Oracle, MaxDb or DB2 DB, possibly Hana DB" >> /tmp/testing1.txt
    fi
    done
  register: dbstopstatus
  #with_items: "{{ sids_list }}"
  with_items: "{{ sidd_list }}"
  when: df | int >= 1
  become: yes
  become_user: root

- name: Results of DB stop status
  debug:
    msg: "{{ item }}"
  with_items: "{{ dbstopstatus.results }}"
  when: df | int >= 1

- name: listcnt=`ps -ef|grep -i tnslsnr|grep -v grep|wc -l`
  shell: ps -ef|grep -i tnslsnr|grep -v grep|wc -l
  register: listcnt

- debug:
    msg: "{{ listcnt }}"

- name: Setting fact - listcnt
  set_fact:
    listcnt: "{{ listcnt['stdout'] }}"
  
- debug:
    msg: "{{ listcnt }}"

- name: Copy listener script to remote endpoint
  copy:
    src: ./files/oraenv_fulllistonly_stop.sh
    dest: /tmp/
    owner: oracle
    group: oinstall
    mode: '0775'
  when: 
    - listcnt | int == 1

- name: Check Listener status and stop Listener if required
  shell: |
    for i in `cat /tmp/SAPDBHOSTfile.txt|sort|uniq`
    do
    if [ $i == {{ hname }} ]
    then
    db=`grep -i "dbms/type" /sapmnt/{{ item }}/profile/DEFAULT.PFL|awk '{print $3}'`
    echo " DB = $db " >> /tmp/testing1.txt
    if [ $db == ora ]
    then
    su - oracle -c /tmp/oraenv_fulllistonly_stop.sh {{ item }}
    else
    echo "Not oracle DB" >> /tmp/testing1.txt
    fi
    else
    echo "$i Its not db server " >> /tmp/testing1.txt
    fi
    done
  register: liststatus
  with_items: "{{ sidd_list }}"
  when:
    - listcnt | int == 1
  become: yes
  become_user: root

- debug:
    msg: "{{ liststatus }}"

- name: "DB type is not Oracle/DB2/MAXDB,checking if it HANA DB"
  debug:
    msg: "DB type is not Oracle/DB2/MAXDB,checking if it HANA DB"
  when:
    - df | int == 0

- name: "Checking HANA DB Status and proceeding DB stop"
  shell: |
    hdbcnt1=`ps -ef|grep -i hdbnameserver|grep -v grep|wc -l`
    echo "HDB count is $hdbcnt1" >> /tmp/testing1.txt
    if [ $hdbcnt1 == 1 ]
    then
    echo "It is HANA DB, DB still Up, proceeding with HDB stop"  >> /tmp/testing1.txt
    hdbuser=`ps -ef|grep -i hdbnameserver|grep -v grep|awk '{print $1}'`
    echo "hdbuser is $hdbuser" >> /tmp/testing1.txt
    su - $hdbuser -c "HDB stop"
    else
    echo "Either No Oracle, MaxDb, DB2 or HANA DB Found, or HANA DB is stopped" >> /tmp/testing1.txt
    fi
  when: df | int == 0
  register: hanastopstatus
  become: yes
  become_user: root

- debug:
    msg: "{{ hanastopstatus }}"

- name: Registering output file
  shell: cat /tmp/testing1.txt
  register : outputfinal

- name: Demo set_facts final output
  set_fact:
    outputfinaldel: "{{ outputfinaldel['stdout'] }}"
  
- debug:
    msg: "{{ outputfinaldel }}"
 
- name: "Delicate output to bld0d server"
  lineinfile:
    path: "/tmp/finaloutput.txt"
    line: "{{ outputfinaldel }}"
  delegate_to: ampsv010bld0d