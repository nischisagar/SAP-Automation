--- 
- name: Ensure Socks tunnel setup
  hosts: windows_report_server
  gather_facts: no
  roles:
  - role: ansible-role-event-socks-tunnel
    run_once: true
    delegate_to: localhost
    vars:
      account_code: "sgi"
      acc_id: "sgi"
      transaction_id: "{{ tower_job_id }}"

- name: Restart Loginventory services call
  hosts: "{{ hname1 }}"
  become: yes
  become_method: runas
  #become_user: ampsvc-010winbau
  vars:
    account_code: "sgi"
    hname1: host.domain.com
    trans_num: "{{ tower_job_id }}"
  gather_facts: no

  tasks:
    - name: Restart Loginventory services
      win_shell: |
        # List of servers to check
        $servers = Get-Content "D:\Script\Wintel Scripts\Uptime\servers.txt"
        $date=(get-date).ToString('dd-MM-yyyy')

        # Output CSV file path
        $outputFile = "D:\Script\Wintel Scripts\Uptime\Reports\Windows_servers_Ipaddress_$date.csv"

        # Initialize an array to store the results
        $results = @()

        # Loop through each server
        foreach ($server in $servers) {
            # Retrieve network interface information
            $networkInterfaces = Get-WmiObject -Class Win32_NetworkAdapterConfiguration -ComputerName $server -Filter "IPEnabled = 'True'"

            # Loop through each network interface
            foreach ($interface in $networkInterfaces) {
                # Create an object to store the results
                $result = [PSCustomObject] @{
                    Server   = $server
                    Interface = $interface.Description
                    IPAddress = $interface.IPAddress -join ", "
                    SubnetMask = $interface.IPSubnet -join ", "
                    Gateway   = $interface.DefaultIPGateway -join ", "
                    DNS       = $interface.DNSServerSearchOrder -join ", "
                }

                # Add the result to the array
                $results += $result
            }
        }

        # Export the results to a CSV file
        $results | Export-Csv -Path $outputFile -NoTypeInformation

        # Display a confirmation message
        Write-Host "Output saved to: $outputFile"